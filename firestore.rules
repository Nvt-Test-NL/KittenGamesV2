rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // User-owned data (except the explicit public profile below)
    match /users/{uid}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    // Public profile readable for signed-in users (for chat search)
    match /users/{uid}/profile/public {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == uid;
    }
    // Allow collectionGroup('profile') reads for docs explicitly marked public
    match /users/{uid}/profile/{docId} {
      allow read: if request.auth != null && resource != null && (
        resource.id == 'public' || resource.data.isPublic == true
      );
    }

    // Helper: check admin via publicProfiles flag
    function isAdmin() {
      return request.auth != null &&
        get(/databases/$(database)/documents/publicProfiles/$(request.auth.uid)).data.isAdmin == true;
    }
    // Optional: super admin level 2
    function isAdmin2() {
      return request.auth != null &&
        get(/databases/$(database)/documents/publicProfiles/$(request.auth.uid)).data.isAdmin2 == true;
    }

    // Chats/rooms: only members or admins
    match /chats/{chatId} {
      allow read, write: if request.auth != null && (
        (resource != null && resource.data.members.hasAny([request.auth.uid])) ||
        (request.resource != null && request.resource.data.members.hasAny([request.auth.uid])) ||
        isAdmin()
      );
    }
    match /chats/{chatId}/messages/{msgId} {
      allow read, write: if request.auth != null && (
        get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]) ||
        isAdmin()
      );
    }

    // Community channels: public read, post only when signed-in. Admins may delete.
    // Allow reading channel docs to enumerate channels
    match /community/{channel} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /community/{channel}/messages/{doc} {
      allow read: if true;
      allow create: if request.auth != null
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.text is string
        && request.resource.data.text.size() > 0
        && request.resource.data.text.size() <= 2000;
      allow delete: if isAdmin();
      allow update: if false;
    }

    // Feedback: ideas board (top-level collection)
    match /feedbackIdeas/{id} {
      allow read: if true;
      allow create: if request.auth != null
        && request.resource.data.title is string
        && request.resource.data.detail is string
        && request.resource.data.status is string
        && request.resource.data.createdBy == request.auth.uid;
      // Only admins can update status or other fields
      allow update: if isAdmin();
      allow delete: if false;
    }

    // Feedback: admin applications (top-level; write-only for users)
    match /feedbackApplications/{id} {
      allow create: if request.auth != null
        && request.resource.data.name is string
        && request.resource.data.email is string
        && request.resource.data.motivation is string;
      allow read, update, delete: if isAdmin();
    }
    // PublicProfiles mirror for simpler queries (no collectionGroup)
    match /publicProfiles/{uid} {
      allow read: if request.auth != null;
      // owners can write, admins can write others (e.g., suspend)
      allow write: if request.auth != null && (
        request.auth.uid == uid || isAdmin() || isAdmin2()
      );
    }

    // User notices for policy violations (shown on next login)
    match /users/{uid}/notices/{id} {
      allow read: if request.auth != null && request.auth.uid == uid; // user reads own
      allow create: if isAdmin() || isAdmin2(); // admins create notices
      allow update: if request.auth != null && request.auth.uid == uid; // user can mark read
      allow delete: if isAdmin2();
    }

    // Extra games catalog (public read, admin write)
    match /games/{id} {
      allow read: if true;
      allow write: if isAdmin() || isAdmin2();
    }
  }
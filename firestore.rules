rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // User-owned data (except the explicit public profile below)
    match /users/{uid}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    // Public profile readable for signed-in users (for chat search)
    match /users/{uid}/profile/public {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == uid;
    }

    // Chats/rooms: only members
    match /chats/{chatId} {
      allow read, write: if request.auth != null && (
        (resource != null && resource.data.members.hasAny([request.auth.uid])) ||
        (request.resource != null && request.resource.data.members.hasAny([request.auth.uid]))
      );
    }
    match /chats/{chatId}/messages/{msgId} {
      allow read, write: if request.auth != null &&
        get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
    }

    // Community channels: public read, post only when signed-in
    match /community/{channel}/messages/{doc} {
      allow read: if true;
      allow create: if request.auth != null
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.text is string
        && request.resource.data.text.size() > 0
        && request.resource.data.text.size() <= 2000;
      allow update, delete: if false;
    }

    // Feedback: ideas board
    match /feedback/ideas/{id} {
      allow read: if true;
      allow create: if request.auth != null
        && request.resource.data.title is string
        && request.resource.data.detail is string
        && request.resource.data.status is string
        && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null; // votes/status updates handled client-side for MVP
      allow delete: if false;
    }

    // Feedback: admin applications (write-only for users)
    match /feedback/applications/{id} {
      allow create: if request.auth != null
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.name is string
        && request.resource.data.email is string
        && request.resource.data.motivation is string;
      allow read, update, delete: if false;
    }
  }
}